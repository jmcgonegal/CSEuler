using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Problem45
{
    class Problem45
    {
        /// <summary>
        /// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
        /// Triangle 	  	T_(n)=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
        /// Pentagonal 	  	P_(n)=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
        /// Hexagonal 	  	H_(n)=n(2n−1) 	  	1, 6, 15, 28, 45, ...
        /// It can be verified that T_(285) = P_(165) = H_(143) = 40755.
        /// Find the next triangle number that is also pentagonal and hexagonal.
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {
            Dictionary<long,long> triangles = new Dictionary<long,long>();
            Dictionary<long,long> pentagonal = new Dictionary<long,long>();
            Dictionary<long,long> hexagonal = new Dictionary<long,long>();
            //Console.WriteLine("T285 = " + 285 * (285 + 1) / 2);
            //Console.WriteLine("P165 = " + 165 * ((3 * 165) - 1) / 2);
            //Console.WriteLine("H143 = " + 143 * ((2 * 143) -1) );
            checked
            {
                for (long n = 1; n < 5000000; n++)
                {
                    triangles.Add(n, n * (n + 1) / 2);
                }
                for (long n = 1; n < 5000000; n++)
                {
                    pentagonal.Add(n, n * ((3 * n) - 1) / 2);
                }
                for (long n = 1; n < 5000000; n++)
                {
                    hexagonal.Add(n, n * ((2 * n) - 1) );
                }
            }
            var result = (from pent in pentagonal join hex in hexagonal on pent.Value equals hex.Value select pent);
            var s1 = from triangle in triangles join test in result on triangle.Value equals test.Value select triangle;

                Console.WriteLine("Found = " +  s1.Last().Value);
                Console.WriteLine("Answer = " +  s1.Last().Key);

            Console.ReadKey();
        }
    }
}
